name: Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
      fail-fast: false

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        allow-prereleases: true
    
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Load cached venv
      id: cached-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}

    - name: Create venv and install dependencies
      if: steps.cached-dependencies.outputs.cache-hit != 'true'
      run: |
        uv sync --all-extras
    
    - name: Run tests
      run: uv run pytest -v

  build-wheel:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Build wheel
      run: |
        rm -rf dist
        uv build
        echo "✅ Wheel built successfully"

    - name: Check for duplicate files in wheel
      run: |
        echo "📦 Checking wheel contents for duplicates..."
        WHEEL_FILE=$(ls dist/*.whl)
        echo "Wheel: $WHEEL_FILE"

        # Extract file list and check for duplicates (skip header/footer lines)
        unzip -l "$WHEEL_FILE" | tail -n +4 | head -n -2 | awk '{print $4}' | grep -v '^$' | sort | uniq -d > duplicates.txt

        if [ -s duplicates.txt ]; then
          echo "❌ ERROR: Found duplicate files in wheel:"
          cat duplicates.txt
          exit 1
        else
          echo "✅ No duplicate files found"
        fi

    - name: Verify wheel installation
      run: |
        echo "🔧 Testing wheel installation..."
        uv venv test-env
        source test-env/bin/activate
        uv pip install dist/*.whl

        # Verify the package can be imported
        python -c "import podcast_creator; print(f'✅ Package version: {podcast_creator.__version__}')"

        # Verify CLI is available
        podcast-creator --version
        echo "✅ Wheel installation successful"

    - name: List wheel contents
      if: always()
      run: |
        echo "📋 Wheel contents:"
        unzip -l dist/*.whl
